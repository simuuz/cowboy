#pragma once
#include "bus.h"

class Cpu {
public:
    Cpu(bool skip);
    void step();
    void reset();
    Bus bus;
    bool halt = false;
    int total_cycles = 0;
    void handle_timers();
    bool skip;
private:
    struct registers {
        union {
            struct {
                u8 f, a;
            };
            u16 af;
        };
            
        union {
            struct {
                u8 c, b;
            };
            u16 bc;
        };

        union {
            struct {
                u8 e, d;
            };
            u16 de;
        };

        union {
            struct {
                u8 l, h;
            };
            u16 hl;
        };
        
        u16 sp = 0, pc = 0;
    } regs;

    void update_f(bool z, bool n, bool h, bool c) {
        regs.f = (z << 7) | (n << 6) | (h << 5) | (c << 4)
               | (0 << 3) | (0 << 2) | (0 << 1) | 0;
    }

    bool cond(u8 opcode) {
        if(opcode & 1)
            return true;
        u8 bits = (opcode >> 3) & 3;
        switch(bits) {
            case 0: return !((regs.f >> 7) & 1);
            case 1: return  ((regs.f >> 7) & 1);
            case 2: return !((regs.f >> 4) & 1);
            case 3: return  ((regs.f >> 4) & 1);
        }    
    }

    template <int group>
    u16 read_r16(u8 bits);
    template <int group>
    void write_r16(u8 bits, u16 val);

    u8 read_r8(u8 bits);
    void write_r8(u8 bits, u8 value);

    void execute(u8 opcode);
    void push(u16 val);
    u16 pop();
    FILE* log;
    void handle_interrupts();
    int cycles = 0;
    int tima_cycles = 0;
    int div_cycles = 0;

    bool ime = false;
    bool ei = false;
};

inline int opcycles[256] = {
  //0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
    4,  12, 8,  8,  4,  4,  8,  4,  20, 8,  8,  8,  4,  4,  8,  4, //0
	4,  12, 8,  8,  4,  4,  8,  4,  12, 8,  8,  8,  4,  4,  8,  4, //1
    8,  12, 8,  8,  4,  4,  8,  4,  8,  8,  8,  8,  4,  4,  8,  4, //2
    8,  12, 8,  8,  12, 12, 12, 4,  8,  8,  8,  8,  4,  4,  8,  4, //3 
    4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4,  4,  4,  8,  4, //4
	4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4,  4,  4,  8,  4, //5
    4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4,  4,  4,  8,  4, //6
    8,  8,  8,  8,  8,  8,  4,  8,  4,  4,  4,  4,  4,  4,  8,  4, //7
    4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4,  4,  4,  8,  4, //8
	4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4,  4,  4,  8,  4, //9
    4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4,  4,  4,  8,  4, //A
    4,  4,  4,  4,  4,  4,  8,  4,  4,  4,  4,  4,  4,  4,  8,  4, //B
    8,  12, 12, 16, 12, 16, 8,  16, 8,  16, 12, 0,  12, 24, 8, 16, //C
	8,  12, 12, 0,  12, 16, 8,  16, 8,  16, 12, 0,  12, 0,  8, 16, //D
    12, 12, 8,  0,  0,  16, 8,  16, 16, 4,  16, 0,  0,  0,  8, 16, //E
    12, 12, 8,  4,  0,  16, 8,  16, 12, 8,  16, 4,  0,  0,  8, 16  //F
};

inline int cbopcycles[256] = {
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //0
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //1
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //2
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //3
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //4
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //5
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //6
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //7
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //8
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //9
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //A
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //B
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //C
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //D
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, //E
    8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8  //F
};//0  1  2  3  4  5  6   7  8  9  A  B  C  D  E   F